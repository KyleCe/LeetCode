package algorithm.easy;import java.util.ArrayList;import java.util.Arrays;import java.util.HashSet;import java.util.List;import test.foundation.S;public class NumberOfLines {    public int[] numberOfLines(int[] widths, String Str) {        char[] arr = Str.toCharArray();        int len = arr.length;        int lines = 0;        int sum = 0;        int i = 0;        for (; i < len - 10; ) {            sum = 0;            for (int j = i; j < i + 10; j++) {                sum += widths[arr[j] - 'a'];            }            i += 10;            if (sum == 100) {                lines++;                continue;            }            int div = (100 - sum) / 10;            while (div > 0 && i <= len - 1) {                if (i + div > len) {                    i--;                    break;                }                for (int j = i; j < i + div; j++) {                    sum += widths[arr[j] - 'a'];                }                i += div;                div = (100 - sum) / 10;            }            int left = 100 - sum;            while (i <= len - 1 && left >= widths[arr[i] - 'a']) {                S.sop(sum);                sum += widths[arr[i] - 'a'];                S.sop(sum);                left = 100 - sum;                i++;            }            lines++;        }        int lastLine = 0;        if (i != len) {            lines++;            for (int j = i; j < len; j++) {                lastLine += widths[arr[j] - 'a'];            }        } else {            lastLine = sum;        }        return new int[]{lines, lastLine};    }    public String[] findWords(String[] words) {        HashSet<Character> set1 = new HashSet<>(Arrays.asList('q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'));        HashSet<Character> set2 = new HashSet<>(Arrays.asList('a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'));        HashSet<Character> set3 = new HashSet<>(Arrays.asList('z', 'x', 'c', 'v', 'b', 'n', 'm'));        HashSet<Character>[] setArr = new HashSet[]{set1, set2, set3};        List<String> list = new ArrayList<>();        for (String word : words) {            int level = -1;            boolean allow = true;            for (char c : word.toLowerCase().toCharArray()) {                if (level == -1) {                    if (set1.contains(c)) level = 0;                    else if (set2.contains(c)) level = 1;                    else if (set3.contains(c)) level = 2;                }                if (!setArr[level].contains(c)) {                    allow = false;                    break;                }            }            if (allow) list.add(word);        }        return list.toArray(new String[list.size()]);    }}
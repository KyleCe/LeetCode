package algorithm.easy;public class CaptureForRook {    public int numRookCaptures(char[][] board) {        int row = board.length;        int col = board[0].length;        int[] rook = find(board);        if (rook == null) return 0;        int rpi = rook[0];        int rpj = rook[1];        int num = 0;        for (int j = rpj; j >= 0; j--) {            if (board[rpi][j] == '.') continue;            if (board[rpi][j] == 'B') break;            if (board[rpi][j] == 'p') {                num++;                break;            }        }        for (int j = rpj; j < row; j++) {            if (board[rpi][j] == '.') continue;            if (board[rpi][j] == 'B') break;            if (board[rpi][j] == 'p') {                num++;                break;            }        }        for (int i = rpi; i >= 0; i--) {            if (board[i][rpj] == '.') continue;            if (board[i][rpj] == 'B') break;            if (board[i][rpj] == 'p') {                num++;                break;            }        }        for (int i = rpi; i < col; i++) {            if (board[i][rpj] == '.') continue;            if (board[i][rpj] == 'B') break;            if (board[i][rpj] == 'p') {                num++;                break;            }        }        return num;    }    private int[] find(char[][] board) {        int row = board.length;        int col = board[0].length;        for (int i =0; i < row; i++) {            for (int j = 0; j < col; j++) {                if (board[i][j] == 'R') return new int[]{i, j};            }        }        return null;    }}
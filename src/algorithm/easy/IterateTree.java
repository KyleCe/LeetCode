package algorithm.easy;import java.util.List;import java.util.concurrent.Callable;public class IterateTree {//    public List<String> iterate(String path) {//        if (path == null || path.isEmpty()) return null;////        List<String> res = new ArrayList<>();//        File dir = new File(path);////        iterateDir(dir, res);////        return res;//    }////    private void iterateDir(File dir, List<String> res) {//        ExecutorService es = Executors.newFixedThreadPool(10);//////        es.submit()////        Queue<Future<List<String>>> dirQueue = new PriorityQueue<>();////        dirQueue.add(dir.getPath());////        es.submit(new ScanCallback(dir, res))//        while (!dirQueue.isEmpty()) {////            File[] children = new File(dirQueue.poll()).listFiles();//            if (children == null || children.length == 0) return;////            for (File chid : children) {//                if (chid.isDirectory()) {//                    dirQueue.add(chid.getPath());//                    continue;//                }////                String childPath = chid.getPath();////                if (childPath.endsWith(".apk")) {//                    res.add(childPath);//                }//            }//        }//    }////    private List<String> list(){////    }    class ScanCallback implements Callable<List<String>> {        private String dir;        private List<String> res;        public ScanCallback(String dir, List<String> res) {            this.dir = dir;            this.res = res;        }        @Override        public List<String> call() throws Exception {            return null;        }    }}
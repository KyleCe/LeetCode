package algorithm.easy;import java.util.HashSet;import java.util.Set;public class DegreeOfAnArray {    public int findShortestSubArray(int[] nums) {        int[] counts = new int[50000];        int max = 0;        Set<Integer> keySet = new HashSet<>();        for (int i : nums) {            counts[i]++;            if (counts[i] > max) {                keySet.clear();                max = counts[i];                keySet.add(i);            } else if (counts[i] == max) {                keySet.add(i);            }            if (max > nums.length / 2) break;        }        int i = 0, j = nums.length - 1;        int min=Integer.MAX_VALUE;        for (int k : keySet) {            for (; i < nums.length && j > 0; ) {                if (nums[i] != k) i++;                if (nums[j] != k) j--;                if (nums[i] == k && nums[j] == k) break;            }            min=Math.min(min, j - i + 1);        }        return min;    }}
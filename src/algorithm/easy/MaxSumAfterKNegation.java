package algorithm.easy;import java.util.PriorityQueue;import java.util.Queue;public class MaxSumAfterKNagation {    public int largestSumAfterKNegations(int[] a, int k) {        Queue<Integer> queue = new PriorityQueue<>(k);        queue.offer(a[0]);        int sum = 0;        int nagCount = 0;        for (int i = 0; i < a.length; i++) {            if (a[i] < queue.peek()) queue.offer(a[i]);            if (a[i] < 0) nagCount++;            sum += a[i];        }        if (nagCount >= k) {            for (int i : queue) {                sum += -2 * i;            }        } else {            while (nagCount-- > 0) {                sum += -2 * queue.poll();            }            if (k - nagCount % 2 != 0) {                sum += -queue.poll();            }        }        return sum;    }    public int largestSumAfterKNegationsWithQueue(int[] A, int K) {        Queue<Integer> queue = new PriorityQueue<>(K);        for(int i:A) queue.add(i);        while(K-->0) queue.add(-queue.poll());        int sum=0;        for(int i=0;i<A.length;i++) sum+=queue.poll();        return sum;    }}